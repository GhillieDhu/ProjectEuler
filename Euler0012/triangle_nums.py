from typing import Generator, List
from collections import Counter
from itertools import dropwhile, count, islice


def triangle_num(n: int) -> int:
    return (n * (n + 1)) // 2


def triangle_nums() -> Generator[int, None, None]:
    for n in count(1):
        yield triangle_num(n)


def min_tri_with_over_n_facts(n: int) -> int:
    ps: List[int] = []

    def factor_count(n: int) -> int:
        from Euler0003.primes import prime_factors
        from Euler0008.product import product
        nonlocal ps
        pfs = prime_factors(n, known_ps=ps)
        ps = sorted(list(set(ps).union(set(pfs))))
        counts = Counter(pfs)
        return product([1 + counts[k] for k in counts.keys()])
    return list(islice(dropwhile(lambda i: factor_count(i) <= n,
                                 triangle_nums()), 1))[0]


if __name__ == '__main__':
    import os
    import sys
    sys.path.append(os.path.dirname(os.pardir))
    '''
    The sequence of triangle numbers is generated by adding the natural
    numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

    The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over
    five hundred divisors?
    '''
    print(min_tri_with_over_n_facts(500))
